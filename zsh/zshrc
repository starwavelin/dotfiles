
# Go path
  export GOPATH=$HOME/projects/go-lib:$HOME/projects/go
  export GOBIN=$HOME/projects/go/bin
  export PATH=$PATH:$GOPATH/bin


# User Folder & projects
USER_FOLDER=mm02942
#USER_FOLDER=tanker

PROJECT_FOLDER=$HOME/projects/haven-projects


# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
  export ZSH=$HOME/.oh-my-zsh
  export PATH=$HOME/dotfiles/git/new-git-command:/usr/local/sbin:$PATH


# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to load
# Setting this variable when ZSH_THEME=random
# cause zsh load theme from this variable instead of
# looking in ~/.oh-my-zsh/themes/
# An empty array have no effect
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"


alias dc="docker-compose"
alias d="docker"

alias lworkflow="dlog uw-workflow"
alias lhaven="dlog haven"
alias ladmin="dlog admin"
alias lproduct="dlog product"
alias lproduct_startup="dlog product-startup"
alias ldatabase="dlog database"
alias lstartup="dlog startup"

alias rstartup="dc up -d startup"
alias rproduct="dc up -d product-startup product"
alias radmin="dc up -d admin"
alias rhaven="dc up -d haven"
alias rworkflow="dc up -d workflow hit-workflow hit-data-svc uw-api uw-workflow"
alias rall="dc up -d startup  product-startup product admin haven hit-workflow hit-data-svc" 
alias rallcp="dc up -d startup  product-startup product admin haven hit-workflow hit-data-svc coverpath-agent coverpath-client" 
alias ruw="dc up -d"
alias ruw="dc up -d hit-workflow hit-data-svc uw-api uw-workflow"
alias dcup="dc up -d"
alias uwrun="npm-rebuild && npm run clean && tsa && cd docker && dc up -d"
alias hitrun="npm-rebuild && npm run clean && tsah  && cd docker  && rall"

alias debug="dc -f docker-compose.yml -f docker-compose-node-inspect.yml up -d"

alias ts="npm run compile:ts"
alias tsa="ts && npm run build:admin"
alias tsh="ts && npm run build:haven && npm run build:haven-static"
alias tsah="tsa && npm run build:haven && npm run build:haven-static"
alias tscp="ts && npm run build:coverpath-client && npm run build:coverpath-agent" 
alias tsahcp="tsah && http://localhost:4012/mocklogin"
alias ba="ts && npm run build:admin && dc restart uw-admin && dlog uw-admin"
alias bcp="npm run build:coverpath-agent && npm run build:coverpath-client"
alias up="dc up -d"

alias dlog="dc logs -f --tail 300"

alias nr="npm run"

alias patch-change="git diff --no-prefix "
alias patch-uw-workflow="patch -p0 < ~/dotfiles/patch/uw-workflow-inspect.patch"


export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm


function ah(){
    cd $PROJECT_FOLDER/haven/docker
    docker-compose up -d startup product product-startup admin haven workflow
}
function wf(){
    cd $PROJECT_FOLDER/haven/docker
    docker-compose up -d workflow
}
function admin(){
    cd $PROJECT_FOLDER/haven/docker
    docker-compose up -d startup workflow admin 
    cd -
}

function haven(){
    cd $PROJECT_FOLDER/haven/docker
    docker-compose up -d s haven product-startup product
    cd -
}
function coverpath(){
    cd $PROJECT_FOLDER/haven/docker
    docker-compose up -d startup webservice workflow coverpath-agent nginx-coverpath-agent coverpath-client nginx-coverpath-client
    cd -
}

function followup(){
    cd $PROJECT_FOLDER/haven/docker
    docker-compose  up -d followup nginx-followup-haven
    cd -
}

function tojson (){
	cd $PROJECT_FOLDER/hit-module-metadata
	node dist/cli/metadata-cli.js convert xlsxToJson workflow_base.xlsx -c 'Workflow' -h Base -o ../haven/apps/common/js/metadata/
	cd -
}
function toxlsx (){
	cd $PROJECT_FOLDER/hit-module-metadata
	node dist/cli/metadata-cli.js convert jsonToXlsx Workflow -d ../haven/apps/common/js/metadata/data/workflow/ -h Base  -o workflow_base.xlsx
	cd - }

function debug_admin(){
    cd $PROJECT_FOLDER/haven/docker
    ./scripts/node-inspect.sh -d admin
    cd -
}

function debug_workflow(){
    cd $PROJECT_FOLDER/haven/docker
    ./scripts/node-inspect.sh -d workflow
    docker-compose up -d admin haven 
    cd -
}

function npm-rebuild(){
    rm -rf node_modules && npm i
}


function rgbuild(){
    npm run docker:build:regression-local
}
function rgrun(){
    npm run docker:run:regression-local:$1
}
function rgstop(){
    npm run docker:stop:regression
}

function copy_api() {
	cp -R ./dist/. ../haven/node_modules/@havenlife/hit-api-client/dist/
	cp -R ./data-model/. ../haven/node_modules/@havenlife/hit-api-client/data-model/
	cp -R ./dist/. ../underwriting/node_modules/@havenlife/hit-api-client/dist/
	cp -R ./data-model/. ../underwriting/node_modules/@havenlife/hit-api-client/data-model/
}
